#!/usr/bin/env ruby
require_relative './lib/option_parser.rb'
require_relative './lib/manager.rb'
require_relative './lib/helpers.rb'
require_relative './lib/webserver.rb'
class Main
  def initialize
    args = ARGV.clone
    Helper.check_environment(args)
    Helper.lock_mg(:LOCK, args)

    begin
      opt = OptionParser::OptionParser.new
      option_parser_default_initializer(opt)
      option_parser_conditions_initializer(opt)
      Helper.lock_mg(:UNLOCK, args)
    rescue SignalException
      Helper.lock_mg(:UNLOCK, args)
    rescue Exception => e
      puts e
      Helper.lock_mg(:UNLOCK, args)
    rescue Interrupt
      Helper.lock_mg(:UNLOCK, args)
    end
  end

  def option_parser_conditions_initializer(opt)

    opt.condition("sources get ${name}")                    { |opts| Source.get_sources(opts[:name]) }
    opt.condition("sources delete <name>")                  { |opts| Source.delete_sources(opts[:name]) }
    opt.condition("sources list")                           { |opts| Source.list_sources() }
    opt.condition("sources show")                           { |opts| Source.show_sources() }
    opt.condition("sources pull {name}")                    { |opts| Source.pull_sources(opts[:name]) }
    opt.condition("sources <name> git <gitcommand>")        { |opts| Source.git_sources(opts[:name], opts[:gitcommand]) }

    opt.condition("saveconfig <pathtosave>")                { |opts| Config.save_config(opts[:pathtosave]) }
    opt.condition("clone <gitrepo>")                        { |opts| Manager.instance.clone(opts[:gitrepo]) }

    opt.condition("init <folderpath>")                      { |opts| Config.init_bsf(opts[:folderpath]) }

    opt.condition("vars")                                   { |opts| VarManager.instance.var_list() }
    opt.condition("tasks")                                  { |opts| puts Manager.instance.tasks_list() }
    opt.condition("set <var>=<value>")                      { |opts| VarManager.instance.set(opts[:var], opts[:value]); VarManager.instance.save }

    opt.condition("execute {-y} ${task}")                   { |opts| Manager.instance.build(opts[:task], opts[:y]) }

    opt.condition("publish")                                { |opts| Manager.instance.publish() }
    opt.condition("diff <hash1> {hash2}")                   { |opts| puts Manager.instance.diff(opts[:hash1], opts[:hash2]) }
    opt.condition("git $<gitcommand>")                      { |opts| GitManager.internal_git(opts[:gitcommand]) }

#    opt.condition("search $<var>=<value>")                  { |opts| GitManager.search_log(opts[:hash]) }
    opt.condition("search $<search>")                  	    { |opts| puts GitManager.search_log(opts[:search]) }

    opt.condition("compare {-o} <task> <hash1> {hash2}")    { |opts| puts Manager.instance.compare(opts[:hash1], opts[:hash2], opts[:o], opts[:task])  }

    opt.condition("compare all {-o} <hash1> {hash2}")       { |opts| puts Manager.instance.compare(opts[:hash1], opts[:hash2], opts[:o]) }

    opt.condition("server ${options}")                      { |opts| WebServer.execute(opts[:options]) }

    opt.condition("log {-f} <task> {hash}")                 { |opts| puts Manager.instance.log(opts[:task], opts[:hash], opts[:f]) }
    opt.condition("status {hash} ")                         { |opts| puts Manager.instance.status(opts[:hash]) }

    opt.condition("clean {-y} ${task}")                     { |opts| Manager.instance.clean(opts[:task], opts[:y]) }
    opt.condition("ls <task> <commit_id>")                  { |opts| puts Manager.instance.ls(opts[:task], opts[:commit_id]) }

    opt.condition("cat <task> <commit_id> <file>")          { |opts| puts Manager.instance.cat(opts[:task], opts[:commit_id], opts[:file]) }

    opt.parse(ARGV)
  end

  def option_parser_default_initializer(opt)

    opt.default do
        puts <<-EOF

    {} Optional Argument
    <> Mandatory Argument
    $ Possibility to multiple Arguments

Start a working Environment
    init <folderpath>                  Create a new Framework Environment
    clone <gitrepo>                    Clone an existing Framework Environment

Work with task/s
    execute ${task}                    Execute the task's execution instruction
    log {-f} <task>                    print or follow the task's log
    status                             Lists the status of all executed tasks
    tasks                              Lists all tasks in system

Work with Input Variables
    set <var>=<value>                  Defines the value to the input variable
    vars                               Lists all input variables

Work with the Git Repositories
    sources get ${name}                Clone a new Git Source to the system
    sources delete <name>              Delete a Git Source from the system
    sources list                       List all the Git Sources in the system
    sources show                       Show all cloned the Git Sources

Work with Git
    git $<gitcommand>                  Execute internal git commands
    publish                            Adds and commits with a specific commit message to local git
    search $<var>=<value>              Searchs on git log's commit message
                                        (<var>=<value> for Hash)
                                        (.=<value> for String)

Work with comparation
    compare {-j} <hash1> {hash2}       Compares tests from hash1 to hash2 (Or HEAD if hash2 not given)
                                        -j flag prints JSON file only

Extra commands
    saveconfig <pathtosave>            Saves internal config with dependencies to pathtosave
    clean {-y} ${task}                 Cleans task's workspace and persistent_ws folders

        EOF
    end


=begin
    opt.default do
      puts <<-EOF

      {} Optional Argument
      <> Mandatory Argument
      $<> Mandatory with possibility to multiple Arguments

      sources add <name> <gitrepo>       Add a new Git Source to the internal config file
      sources get ${name}                Clone a new Git Source to the system
      sources remove <name>              Remove a Git Source from the internal config file
      sources delete <name>              Delete a Git Source from the system
      sources list                       List all the Git Repositories in the system
      sources show                       Show all cloned the Git Repositories

      init <folderpath>                  Create a new Framework Environment or reinitialize an existing one
      clone <gitrepo>                    Clone an existing Framework Environment
      execute ${task}                    Execute the task's
      log {-t} <task>                    print or follow the task's log
      help                               You know exactly what this does. Don't you? *wink*
      list                               Lists all the Input Variables in the system
      set <var>=<value>                  Defines the value to the input variable
      status                             Lists the status of all executed tasks
      publish                            Adds and commits with a specific commit message to local git
      git $<gitcommand>                  Execute internal git commands
      save config <pathtosave>           Saves internal config with dependencies to pathtosave
      search <var>=<value>               Searchs on git log's commit message
      clean                              Cleans persistent folder (eg. tasks' tests)
      compare {-j} <hash1> {hash2}     Compares tests from hash1 to hash2 (Or HEAD if hash2 not given)
                                         -j flag prints JSON file only
      EOF
    end
=end
  end
end

Main.new
