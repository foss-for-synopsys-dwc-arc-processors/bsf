#!/usr/bin/env ruby
require 'json'
require 'erb'
require 'date'

class Directory_Manager
  def initialize()
  end
  
  def get_version()
    return Date.today.to_s.delete! '-'
  end

  def create_directories(config)
    Dir.mkdir(config.get(':root')) if ! File.directory? (config.get(':root'))
    Dir.mkdir(config.get(':modulefile')) if ! File.directory? (config.get(':modulefile'))
    %w[/toolchain/ /toolchain/build].each { |dir| Dir.mkdir (config.get(':root') + dir) }
    puts 'Directories Created'
  end

  def create_build_dir(config, name)
    build_dir = "#{config.get(':root')}/toolchain/build/#{name}/"
    Dir.mkdir(build_dir) if !File.directory? (build_dir)
    Dir.chdir(build_dir)
  end
  
  def create_module_file(config, name)
    module_dir = "#{config.get(':modulefile')}/#{name}/"
    Dir.mkdir(module_dir) if !File.directory? (module_dir)

    template = ERB.new(File.read("#{Dir.getwd}/workload/toolchain.module.erb"))
    prefix = "#{config.get(':prefix')}"
    File.open("#{module_dir}/#{get_version()}.lua", 'w') do |f|
      f.write template.result(binding)
    end

  end

end

class Config
  def initialize(file = nil)
    @config = file
  end

  def create_default_config()
    root = '/scratch/luiss/arc-tools/'
    prefix = "#{root}/install/"
    modulefile = "#{root}/modulefiles/"
    
    File.open("#{Dir.getwd}/workload/config", 'w') do |f|
      f.write ERB.new(File.read("#{Dir.getwd}/workload/configuration.erb")).result(binding)
    end
    puts 'File Created'
  end

  def set(key, value)
    @config.store(key, value)
  end
  
  def get(key)
    @config[key] 
  end
  
  def contains(key)
    @config.has_key(key)
  end

  def get_config()
    @config
  end

end

class OptionParser
  def initialize(argv)
    @opts = {}
    set(argv)
  end
  def set(argv)
    tmp = argv.shift
    @opts.store(:command, :init)  if (tmp =~ /init/)
    @opts.store(:command, :build) if (tmp =~ /build/)
    @opts.store(:command, :help) if (tmp =~ /help/) or (tmp =~ /h/)
    
    @opts.store(:command, :set) if (tmp =~ /set/)
    @opts.store(:set, argv.shift) if (tmp =~ /set/)
  end

  def get(key)
   @opts[key]
  end

end

class Manager
  def initialize()
  end

  def init()
    Config.new().create_default_config()
  end
  
  def build()
    config = Config.new(JSON.parse(File.read("#{Dir.getwd}/workload/config")))
    dir_manager = Directory_Manager.new()

    compiler(config, dir_manager)
  end

  def set(str)
    config = Config.new(JSON.parse(File.read("#{Dir.getwd}/workload/config")))
    command = str.split('=').first
    path = str.split('=').last
    puts command
    case command
    when 'root'
      config.set(":root", "#{path}")
      config.set(":prefix", "#{path}/install")
      config.set(":modulefile", "#{path}/modulefiles")
    when 'prefix'
      config.set(":prefix", "#{path}/install")
    when 'modulefile'
      config.set(":modulefile", "#{path}/modulefiles")
    end



    File.open("#{Dir.getwd}/workload/config", 'w') do |f|
      f.write config.get_config().to_json
    end
  end


  def help()
    puts 'HELP ME'
  end

  
  def get_data()
    return JSON.parse(File.read("#{Dir.getwd}/workload/config.json"))
  end
  
  def compiler(config, dir_manager)
    data = get_data()
    dir_manager.create_directories(config)
    
    main_root = Dir.getwd

    for tool in data
      name = tool[0]
      dir_manager.create_module_file(config, name)
      dir_manager.create_build_dir(config, name)

      execute = process_env(tool[1]['execute'], 'PREFIX', "#{config.get(':prefix')}/#{name}/#{Date.today.to_s.delete! '-'}")
      puts execute
      system(execute)

      Dir.chdir(main_root)
    end 
  end

  def process_env(str, name, subs)
    return str.gsub(/\$env\((#{name})\)/) do |m|
      subs
    end
  end
end

class Main
  def initialize()
    opts = OptionParser.new(ARGV)
    manager = Manager.new()
    main(opts, manager)
  end

  def main(opts, manager)
    case opts.get(:command)
    when :init
      manager.init()
    when :build
      manager.build()
    when :set
      manager.set(opts.get(:set))
    when :help
      manager.help()
    end
    
  end
end

Main.new()
