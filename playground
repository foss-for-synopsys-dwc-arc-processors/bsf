#!/usr/bin/env ruby
require 'json'
require 'erb'

class Directory_Manager
  def initialize()
    #create_directories(config)
  end
  
  def create_directories(config)
    Dir.mkdir(config.get(':root')) if ! File.directory? (config.get(':root'))
    Dir.mkdir(config.get(':modulefile')) if ! File.directory? (config.get(':modulefile'))
    %w[toolchain toolchain/build].each { |dir| Dir.mkdir (config.get(':root') + dir) }
    puts 'Directories Created'
  end

  def create_build_dir(config, name)
    build_dir = "#{config.get(':root')}/toolchain/build/#{name}/"
    Dir.mkdir(build_dir) if !File.directory? (build_dir)
    Dir.chdir(build_dir)
  end
  
  def create_module_file(config, name)
    module_dir = "#{config.get(':modulefile')}/#{name}/"
    Dir.mkdir(module_dir) if !File.directory? (module_dir)

    template = ERB.new(File.read("#{Dir.getwd}/workload/toolchain.module.erb"))
    prefix = "#{config.get(':prefix')}"
    File.open("#{module_dir}/date.lua", 'w') do |f|
      f.write template.result(binding)
    end

  end

end

class Config
  def initialize(file = nil)
    @config = file
  end

  def create_default_config()
    root = '/scratch/luiss/arc-tools/'
    prefix = "#{root}/install/"
    modulefile = "#{root}/modulefiles/"
    
    File.open("#{Dir.getwd}/workload/config", 'w') do |f|
      f.write ERB.new(File.read("#{Dir.getwd}/workload/configuration.erb")).result(binding)
    end
    puts 'File Created'
  end

  def set(key, value)
    @config.store(key, value)
  end
  
  def get(key)
    @config[key] 
  end
  
  def contains(key)
    @config.has_key(key)
  end

  def get_config()
    @config
  end

end

class OptionParser
  def initialize(argv)
    @opts = {}
    set(argv)
  end
  def set(argv)
    tmp = argv.shift
    @opts.store(:command, :init)  if (tmp =~ /init/)
    @opts.store(:command, :build) if (tmp =~ /build/)
  end

  def get(key)
   @opts[key]
  end

end

class Manager
  def initialize(config, manager)
    @config = config
    @manager = manager
  end

  def convert()
    data = File.read("#{Dir.getwd}/workload/config.json")
    data = JSON.parse(data)
    
    @manager.create_directories(@config)

    for d in data
      @manager.create_module_file(@config, d[0])
      @manager.create_build_dir(@config, d[0])
      #Dir.chdir("#{@config.get(':root')}/toolchain/build/#{d[0]}")
    
      execute = process_env(d[1]['execute'], 'PREFIX', @config.get(':prefix'))
      puts execute
      system(execute)
      exit
    end 
    puts data
  end


  def process_env(str, name, subs)
    return str.gsub(/\$env\((#{name})\)/) do |m|
      subs
    end

  end

end
opts = OptionParser.new(ARGV)

case opts.get(:command)
when :init
  Config.new().create_default_config()
when :build
  config = Config.new(JSON.parse(File.read("#{Dir.getwd}/workload/config")))
  puts config.get_config()
  #Directory_Manager.new(config)
  #Manager.new(config).convert()
  Manager.new(config, Directory_Manager.new(),).convert()
end



#config = Config.new(file, opts)

#config.set(':root', opts.get(':root'))


#dir = Directory_Manager.new(config)
#puts config.print_()

#jsonified = JSON.generate(config.get_config())

#File.open('aqi.json', 'w') do |f|
#  f.write jsonified
#end

